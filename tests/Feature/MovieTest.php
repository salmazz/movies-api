<?php

namespace Tests\Feature;

use Illuminate\Http\Response;
use Modules\Movie\Entities\Movie;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class MovieTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Movie::factory()->count(15)->create();
    }

    /**
     * Test has model reterived data successfully
     *
     * @return void
     */
    public function test_that_movie_has_reterived_data()
    {
        $response = $this->json('GET', '/api/movies/list-of-movies');

        $response->assertStatus(Response::HTTP_OK);
    }

    /**
     * Test page is have json structure.
     *
     * @return void
     */
    public function test_that_movies_list_page_have_json_structure()
    {
        $response = $this->json('GET', '/api/movies/list-of-movies');

        $response->assertStatus(Response::HTTP_OK)
            ->assertJsonStructure([
                'data' => [
                    '*' => [
                        'movie_id',
                        'overview' ,
                        'backdrop_path',
                        'release_date' ,
                        'original_language',
                        'original_title'  ,
                        'popularity' ,
                        'poster_path',
                        'title',
                        'video',
                        'adult',
                        'vote_average',
                        'vote_count',
                        'type_of_movie',
                    ],
                ]
            ]);
    }

    /**
     * Test that api will search in title
     *
     * @return  void
     */
    public function test_that_api_will_search_in_title()
    {
        $title = Movie::value('title');

        $response = $this->json('GET', '/api/movies/list-of-movies', ['q' => $title]);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJsonFragment(['title' => $title]);
    }

    /**
     * Test page is have overview selected in search
     *
     * @return void
     */
    public function test_that_has_make_search_with_overview()
    {
        $overview = Movie::value('overview');

        $response = $this->json('GET', '/api/movies/list-of-movies', ['q' => $overview]);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJsonFragment(['overview' => $overview]);
    }

    /**
     * Test page is have release date selected in search
     *
     * @return void
     */
    public function test_that_has_make_search_with_release_date()
    {
        $release_date = Movie::value('release_date');

        $response = $this->json('GET', '/api/movies/list-of-movies', ['release_date' => $release_date]);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJsonFragment(['release_date' => $release_date]);
    }

    /**
     * Test page is have original language selected in search
     *
     * @return void
     */
    public function test_that_has_make_search_with_original_language()
    {
        $original_language = Movie::value('original_language');

        $response = $this->json('GET', '/api/movies/list-of-movies', ['original_language' => $original_language]);

        $response->assertStatus(Response::HTTP_OK);
        $response->assertJsonFragment(['original_language' => $original_language]);
    }
}
